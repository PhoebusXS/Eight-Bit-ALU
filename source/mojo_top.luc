module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig ans[8];
  
  adder my_adder;
  comparer my_comparer;
  logic_operator my_logic_operator;
  shifter my_shifter;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    led = 8h00;             // turn LEDs off
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    my_adder.a = io_dip[1];
    my_adder.b = io_dip[0];
    my_adder.alufn = io_dip[2][5:0];
    
    my_logic_operator.a = io_dip[1];
    my_logic_operator.b = io_dip[0];
    my_logic_operator.alufn = io_dip[2][5:0];
    
    my_shifter.a = io_dip[1];
    my_shifter.b = io_dip[0];
    my_shifter.alufn = io_dip[2][5:0];
    
    my_comparer.z = my_adder.cmpz;
    my_comparer.v = my_adder.cmpv;
    my_comparer.n = my_adder.cmpn;
    my_comparer.alufn = io_dip[2][5:0];

    case (io_dip[2][5:4]) {
      b00:
        ans = my_adder.ans;
      b01:
        ans = my_logic_operator.ans;
      b10:
        ans = my_shifter.ans;
      b11:
        ans = my_comparer.ans;
      default:
        ans = 8b0;
    }
    
    led = ans;
  }    
}
